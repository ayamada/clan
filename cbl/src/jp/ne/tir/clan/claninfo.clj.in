(ns jp.ne.tir.clan.claninfo
  ;; @AC_MSG_1@
  ;; @AC_MSG_2@
  ;; @AC_MSG_3@
  ;; @AC_MSG_4@
  ;; @AC_MSG_5@
  ;; @AC_MSG_6@
  (:import [java.util Date]
           [java.text SimpleDateFormat])
  )

;; コンパイル時に値を固定する為のマクロ。必要なら適切にquoteした結果を返す事
;; (def a (eager (str "aa" "bb"))) => (def a "aabb")
(defmacro eager [expr] (eval expr))


;;; --- build info ---
(def ^:const build-number 
  ;; TODO: must be include more information
  (eager (str (System/currentTimeMillis))))
(def ^:const build-date
  (eager (str (.format (SimpleDateFormat. "yyyy/MM/dd HH:mm:ss z")
                       (Date. (System/currentTimeMillis))))))
(def ^:const build-env "@BUILD_ENV@")
(def ^:const build-javac "@BUILD_JAVAC@")
(def ^:const build-target ; (or :desktop :android ...)
  (eager
    (let [target (or (System/getenv "CLAN_TARGET") "desktop")
          k (case (keyword target)
              :desktop :desktop
              :android :android
              nil)]
      (assert k target)
      k)))
(def ^:const is-release?
  (eager (not (boolean (System/getenv "CLAN_DEBUG")))))


;;; --- project info ---
(def ^:const project-groupid "@PROJECT_GROUPID@")
(def ^:const project-artifactid "@PROJECT_ARTIFACTID@")
(def ^:const project-version "@PROJECT_VERSION@")
(def ^:const project-name "@PROJECT_NAME@")
(def ^:const project-android-versioncode "@PROJECT_ANDROID_VERSIONCODE@")


;;; --- clan info ---
(def ^:const clan-groupid "@CLAN_GROUPID@")
(def ^:const clan-artifactid "@CLAN_ARTIFACTID@")
(def ^:const clan-version "@CLAN_VERSION@")
(def ^:const clan-name "@CLAN_NAME@")
(def ^:const clan-clojure-version "@CLAN_CLOJURE_VERSION@")
(def ^:const clan-libgdx-version "@CLAN_LIBGDX_VERSION@")
(def ^:const clan-android-version "@CLAN_ANDROID_VERSION@")
(def ^:const clan-neko-version "@CLAN_NEKO_VERSION@")



