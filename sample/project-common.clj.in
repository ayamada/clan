;; @AC_MSG_1@
;; @AC_MSG_2@
;; @AC_MSG_3@
;; @AC_MSG_4@
;; @AC_MSG_5@
;; @AC_MSG_6@

;; this file is loaded by desktop/project.clj and android/project.clj

;;; ----------------------------------------------------------------
;;; common

(def dependencies-common
  `[
    [com.badlogic.gdx/gdx "@CLAN_LIBGDX_VERSION@"]
    [clj-time/clj-time "0.5.1"]
    ])

(def profiles-common
  `{
    })

(defmacro defproject-common [& args]
  `(defproject
     @PROJECT_ARTIFACTID@ "@PROJECT_VERSION@"
     ;:description "FIXME: write description"
     ;:url "http://example.com/FIXME"
     ;:license {:name "Eclipse Public License"
     ;          :url "http://www.eclipse.org/legal/epl-v10.html"}
     :min-lein-version "2.0.0"
     :max-lein-version "2.0.0"
     ;:source-paths ["../clan/cbl/src" "src" "../src"]
     :java-source-paths ["../clan/cbl/src-java" "src-java" "../src-java" "gen"] ; "gen" for android
     :target-path "target/" ; Where to place the project's jar file.
     :compile-path "target/classes" ; For .class files.
     :resource-paths ["target/resources"]
     :test-paths ["../test"]
     :global-vars {*warn-on-reflection* true
                   *assert* true}
     ~@args))

;;; ----------------------------------------------------------------
;;; for desktop

(def dependencies-desktop
  `[~@dependencies-common
    [org.clojure/clojure "@CLAN_CLOJURE_VERSION@"]
    [com.badlogic.gdx/gdx-natives "@CLAN_LIBGDX_VERSION@"]
    [com.badlogic.gdx/gdx-backend-lwjgl "@CLAN_LIBGDX_VERSION@"]
    [com.badlogic.gdx/gdx-backend-lwjgl-natives "@CLAN_LIBGDX_VERSION@"]
    ])

(def profiles-desktop
  (merge
    profiles-common
    `{
      :repl {
             :source-paths ["../clan/cbl/src" "src" "../src"]
             }
      :devpack {
                :source-paths ["../clan/cbl/src" "src"] ; "../src" はコンパイルしたくないので、jar起動時に明示的に渡す
                :aot :all
                :jar-name "@PROJECT_ARTIFACTID@-devpack-without-dep.jar"
                :uberjar-name "@PROJECT_ARTIFACTID@-devpack.jar"
                }
      :pack {:source-paths ["../clan/cbl/src" "src" "../src"]
             :aot :all
             :jar-name "@PROJECT_ARTIFACTID@-without-dep.jar"
             :uberjar-name "@PROJECT_ARTIFACTID@.jar"
             }
      :release {:global-vars {*warn-on-reflection* false
                              *assert* false}
                ;; > Put a regex here to compile all namespaces whose names match.
                :omit-source true
                ;:jar-exclusions [#"(?:^|/).svn/"]
                ;:uberjar-exclusions [#"META-INF/DUMMY.SF"]
                }
      }))

;; this macro is expanded in desktop/project.clj
(defmacro defproject-desktop []
  `(defproject-common
     :dependencies ~dependencies-desktop
     :main @PROJECT_DESKTOP_GROUPID@.Desktop
     :profiles ~profiles-desktop
     ))

;;; ----------------------------------------------------------------
;;; for android

(def dependencies-android
  `[~@dependencies-common
    [org.clojure-android/clojure "@CLAN_CLOJURE_VERSION@"]
    [com.badlogic.gdx/gdx-backend-android "@CLAN_LIBGDX_VERSION@"]
    ;[com.google.android/android "@CLAN_ANDROID_VERSION@" :scope "system"]
    ;[org.codehaus.jsr166-mirror/jsr166y "1.7.0"] ; see http://tnoda-clojure.tumblr.com/post/48710608069/classnotfoundexception-jsr166y-forkjoinpool
    [neko/neko "@CLAN_NEKO_VERSION@"]
    ])

(def profiles-android
  (merge
    profiles-common
    `{
      :devpack {
                :source-paths ["../clan/cbl/src" "src" "../src"]
                :aot :all
                :jar-name "@PROJECT_ARTIFACTID@-devpack-without-dep.jar"
                :uberjar-name "@PROJECT_ARTIFACTID@-devpack.jar"
                ;:dependencies [[android/tools.nrepl "0.2.0-bigstack"]]
                :android {:aot :all-with-unused}
                }
      :pack {:source-paths ["../clan/cbl/src" "src" "../src"]
             :aot :all
             :jar-name "@PROJECT_ARTIFACTID@-without-dep.jar"
             :uberjar-name "@PROJECT_ARTIFACTID@.jar"
             }
      :release {:global-vars {*warn-on-reflection* false
                              *assert* false}
                :omit-source true
                :android {
                          :aot :all ; TODO: neko.compilation/init のAOTコンパイルが通ってない場合は :all-with-unused にする必要がある、要確認
                          :out-apk-path "target/@PROJECT_ARTIFACTID@.apk"
                          :keystore-path "@ANDROID_KEYSTORE_PATH@"
                          :key-alias "@ANDROID_KEY_ALIAS@"
                          ;; WARNING: THIS IS DANGEROUS!
                          ;:keypass "password"
                          ;:storepass "password"
                          }
                }
      }))

;; this macro is expanded in android/project.clj
(defmacro defproject-android []
  `(defproject-common
     :dependencies ~dependencies-android
     ;:main @PROJECT_DESKTOP_GROUPID@.MainActivity ; android hasnt :main
     :profiles ~profiles-android
     ;:plugins [[lein-droid/lein-droid "0.1.0"]]
     :plugins [[lein-droid/lein-droid "0.2.0-SNAPSHOT"]]
     ;:plugins [[lein-droid/lein-droid "0.2.0-LOCALTEST"]]
     ;:resource-paths ["target/gdx-res"]
     :android {
               :sdk-path "@ANDROID_SDK_PATH@"
               :target-version "17"
               ;:min-version "10"
               :aot-exclude-ns ["clojure.parallel" "clojure.core.reducers"]
               :assets-path "target/resources/assets"
               :native-libraries-paths ["target/resources/lib"]
               ;:library false
               :resource-jars-paths ["../tmp/libgdx/gdx.jar"]
               ;; Uncomment this line to be able to use Google API.
               ;; :use-google-api true
               ;; Uncomment this if dexer fails with OutOfMemoryException
               ;; :force-dex-optimize true
               }
     :install-releases? false
     ))


;; 日本語コードはutf-8で
