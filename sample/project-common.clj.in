;; @AC_MSG_1@
;; @AC_MSG_2@
;; @AC_MSG_3@
;; @AC_MSG_4@
;; @AC_MSG_5@
;; @AC_MSG_6@

;; this file is loaded by desktop/project.clj and android/project.clj

;;; ----------------------------------------------------------------
;;; common

(def dependencies-common
  `[
    [com.badlogic.gdx/gdx "@CLAN_LIBGDX_VERSION@"]
    ;[primitive-math "0.1.3"]
    ;[clj-time/clj-time "0.5.1"]
    ])

(def profiles-common
  `{
    })

(defmacro defproject-common [& args]
  `(defproject
     @PROJECT_ARTIFACTID@ "@PROJECT_VERSION@"
     ;:description "FIXME: write description"
     ;:url "http://example.com/FIXME"
     ;:license {:name "Eclipse Public License"
     ;          :url "http://www.eclipse.org/legal/epl-v10.html"}
     :min-lein-version "2.3.1"
     ;:jvm-opts ["-Duser.language=en"]
     ;:source-paths ["../clan/cbl/src" "src" "../src"]
     :java-source-paths ["../clan/cbl/src-java" "src-java" "../src-java" "gen"] ; "gen" for android
     :target-path "target/" ; Where to place the project's jar file.
     :compile-path "target/classes" ; For .class files.
     :resource-paths ["target/resources"]
     :test-paths ["../test"]
     :global-vars {*warn-on-reflection* true
                   *assert* true}
     ~@args))

;;; ----------------------------------------------------------------
;;; for desktop

(def dependencies-desktop
  `[~@dependencies-common
    [org.clojure/clojure "@CLAN_CLOJURE_VERSION@"]
    [com.badlogic.gdx/gdx-natives "@CLAN_LIBGDX_VERSION@"]
    [com.badlogic.gdx/gdx-backend-lwjgl "@CLAN_LIBGDX_VERSION@"]
    [com.badlogic.gdx/gdx-backend-lwjgl-natives "@CLAN_LIBGDX_VERSION@"]
    ])

(def profiles-desktop
  (merge
    profiles-common
    `{
      :repl {
             :source-paths ["../clan/cbl/src" "src" "../src"]
             :repl-options {:init-ns @PROJECT_CAL_GENERATOR_CLASS@}
             ;:dependencies [[org.clojure/tools.nrepl "0.2.3"]
             ;               [clojure-complete/clojure-complete "0.2.3"]]
             }
      :devpack {
                :source-paths ["../clan/cbl/src" "src"] ; "../src" is not compiled on devel, "../src" is included to classpath on `make run`.
                :aot :all
                :jar-name "@PROJECT_ARTIFACTID@-devpack-without-dep.jar"
                :uberjar-name "@PROJECT_ARTIFACTID@-devpack.jar"
                }
      :release {
                :source-paths ["../clan/cbl/src" "src" "../src"]
                :aot :all
                :jar-name "@PROJECT_ARTIFACTID@-without-dep.jar"
                :uberjar-name "@PROJECT_ARTIFACTID@.jar"
                :global-vars {*warn-on-reflection* false
                              *assert* false}
                :omit-source true
                ;; Put a regex here to compile all namespaces whose names match.
                ;:jar-exclusions [#"(?:^|/).svn/"]
                ;:uberjar-exclusions [#"META-INF/DUMMY.SF"]
                }
      }))

;; this macro is expanded in desktop/project.clj
(defmacro defproject-desktop []
  `(defproject-common
     :dependencies ~dependencies-desktop
     :main @PROJECT_DESKTOP_GROUPID@.Desktop
     :profiles ~profiles-desktop
     ))

;;; ----------------------------------------------------------------
;;; for android

(declare get-resource-jars-paths estimate-JXmx)

(def dependencies-android
  `[~@dependencies-common
    [org.clojure-android/clojure "@CLAN_CLOJURE_VERSION@@CLAN_CLOJURE_VERSION_ANDROID_SUFFIX@"]
    [com.badlogic.gdx/gdx-backend-android "@CLAN_LIBGDX_VERSION@"]
    ;[com.google.android/android "@CLAN_ANDROID_VERSION@" :scope "system"]
    ;[org.codehaus.jsr166-mirror/jsr166y "1.7.0"] ; see http://tnoda-clojure.tumblr.com/post/48710608069/classnotfoundexception-jsr166y-forkjoinpool
    [neko/neko "@CLAN_NEKO_VERSION@"]
    ;[org.clojars.nakkaya/arduino-firmata "0.2.0"]
    ])

(def profiles-android
  (merge
    profiles-common
    `{
      :devpack {
                :source-paths ["../clan/cbl/src" "src" "../src"]
                :aot :all
                :jar-name "@PROJECT_ARTIFACTID@-devpack-without-dep.jar"
                :uberjar-name "@PROJECT_ARTIFACTID@-devpack.jar"
                ;:dependencies [[android/tools.nrepl "0.2.0-bigstack"]
                ;               [org.clojure-android/clojure-complete "0.3.0-SNAPSHOT"]]
                :android {:aot :all-with-unused
                          :enable-dynamic-compilation true
                          :start-nrepl-server false
                          }
                }
      :release {
                :source-paths ["../clan/cbl/src" "src" "../src"]
                :aot :all
                :jar-name "@PROJECT_ARTIFACTID@-without-dep.jar"
                :uberjar-name "@PROJECT_ARTIFACTID@.jar"
                :global-vars {*warn-on-reflection* false
                              *assert* false}
                :omit-source true
                :android {
                          :enable-dynamic-compilation true
                          :start-nrepl-server false
                          :aot :all-with-unused
                          :out-apk-path "target/@PROJECT_ARTIFACTID@.apk"
                          }
                }
      }))

;; this macro is expanded in android/project.clj
(defmacro defproject-android []
  `(defproject-common
     :dependencies ~dependencies-android
     ;:main @PROJECT_DESKTOP_GROUPID@.MainActivity ; android hasnt :main
     :profiles ~profiles-android
     :plugins [[lein-droid/lein-droid "0.2.0-SNAPSHOT"]]
     ;:plugins [[lein-droid/lein-droid "0.2.0-LOCALTEST"]]
     ;:resource-paths ["target/gdx-res"]
     :android {
               :sdk-path "@ANDROID_SDK_PATH@"
               :target-version "17"
               :min-version "10"
               :aot-exclude-ns ["clojure.parallel" "clojure.core.reducers"]
               :assets-path "target/resources/assets"
               :native-libraries-paths ["target/resources/lib"]
               ;:library false
               ;:resource-jars-paths ["../tmp/libgdx/gdx.jar"]
               :resource-jars-paths ~(if (System/getenv "CLAN_BUILD_APK")
                                       (get-resource-jars-paths dependencies-android)
                                       [])
               ;; Uncomment this if dexer fails with OutOfMemoryException
               ;; :force-dex-optimize true
               ;; Options to pass to dx executable, former is for general
               ;; java-related options and later is for 'dex task'-specific options.
               ;; :dex-opts ["-JXmx4096M"]
               ;:dex-opts [~(estimate-JXmx 1280)]
               :dex-opts [~(estimate-JXmx)]
               ;; Proguard config for "droid create-obfuscated-dex" task.
               ;; :proguard-conf-path "proguard.cfg"
               ;; :proguard-opts ["-printseeds"]
               ;; Uncomment this line to be able to use Google API.
               ;; :use-google-api true
               }
     :install-releases? false
     ))


(use '[leiningen.core [classpath :only [resolve-dependencies]]])
(defn get-resource-jars-paths [dependencies]
  (let [filtered-deps (filter
                        (fn [entry]
                          ;; entry = ;[com.google.android/android "@CLAN_ANDROID_VERSION@" :scope "system"]
                          (let [package (nth entry 0)
                                version (nth entry 1)
                                scope (:scope (apply array-map
                                                     (rest (rest entry))))]
                            ;; remove by scope
                            (or
                              (nil? scope)
                              (= scope "compile"))))
                        dependencies)
        _ (when (System/getenv "DEBUG")
            (prn :included-deps filtered-deps))
        all-paths (map str
                       (resolve-dependencies
                         :dependencies {:dependencies filtered-deps}))
        ;; all-paths may include dup entries
        uniq-paths (seq (set all-paths))
        result (remove
                 ;; remove by package (these are include by lein-droid)
                 #(or 
                    (re-find #"[/\\]neko[/\\]neko[/\\]" %)
                    (re-find #"[/\\]org[/\\]clojure[/\\]clojure[/\\]" %)
                    (re-find #"[/\\]org[/\\]clojure-android[/\\]clojure[/\\]" %)
                    (re-find #"[/\\]android[/\\]clojure[/\\]" %))
                 uniq-paths)
        _ (when (System/getenv "DEBUG")
            (prn :resource-jars-paths result))
        ]
    result))

(defn estimate-JXmx [& [use-mem]]
  ;; It returns string like "-JXmx4096M"
  ;; It depend on OS's bits and amount of physical memory
  ;; - At least 1024 on 32bit OS
  ;; - At least 2048 on 64bit OS
  (let [minimum-mem (if (= "64" (System/getProperty "sun.arch.data.model"))
                      2048
                      1024) 
        maximum-mem 4096
        physical-mem-half nil ; TODO: get from OS (must be portable, but it is very hard)
        target-mem (or use-mem physical-mem-half 0)
        result (int (min maximum-mem (max minimum-mem target-mem)))
        ]
    (str "-JXmx" result "M")))

