package @PROJECT_ANDROID_GROUPID@;
/*
@AC_MSG_1@
@AC_MSG_2@
@AC_MSG_3@
@AC_MSG_4@
@AC_MSG_5@
@AC_MSG_6@

@AC_MSG_TMPL_1@
@AC_MSG_TMPL_2@
*/

import java.util.concurrent.Callable;
import jp.ne.tir.clan.BootLoader;
import jp.ne.tir.clan.Config;

import android.os.Bundle;
import android.content.Context;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.backends.android.AndroidApplication;
import com.badlogic.gdx.backends.android.AndroidApplicationConfiguration;

import clojure.lang.RT;
import clojure.lang.Symbol;

public class MainActivity extends AndroidApplication {
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		AndroidApplicationConfiguration config = new AndroidApplicationConfiguration();
		config.useGL20 = false;
		final Context context = this.getApplicationContext();

		Config clanConf = new Config();
		clanConf.logoPath = "assets/cbl_logo.png";
		//clanConf.fontPath = "assets/cbl_font.fnt";
		clanConf.jinglePath = "assets/cbl_jingle.ogg";
		clanConf.isDisplayLog = true;
		clanConf.cljInit = new Runnable() {
			// NB: it must can to run another threads.
			@Override
			public void run() {
				try {
					RT.var("clojure.core", "refer").invoke(Symbol.intern(null, "clojure.core"));
				}
				catch (Throwable e) {
					throw new RuntimeException("failed to initialize at clojure");
				}
			}
		};
		clanConf.nekoInit = new Runnable() {
			// NB: it is certified to run main thread.
			@Override
			public void run() {
				try {
					RT.var("clojure.core", "require").invoke(Symbol.intern("neko.compilation"));
					RT.var("neko.compilation", "init").invoke(context);
				}
				catch (Throwable e) {
					throw new RuntimeException("failed to initialize at neko");
				}
			}
		};
		clanConf.spawner = new Callable<ApplicationListener>() {
			// NB: it must can to run another threads.
			@Override public ApplicationListener call() throws Exception {
				//return new @PROJECT_CAL_GENERATOR_CLASS@();
				try {
					//return (ApplicationListener)Class.forName("@PROJECT_CAL_GENERATOR_CLASS@").newInstance();
					RT.var("clojure.core", "require").invoke(Symbol.intern("jp.ne.tir.clan.clanutil"));
					return (ApplicationListener)RT.var("jp.ne.tir.clan.clanutil", "generate-cal").invoke("@PROJECT_CAL_GENERATOR_CLASS@", "@PROJECT_CAL_GENERATOR_FN@");
				} catch (Throwable e) {
					//e.printStackTrace();
					throw new Exception(e);
				}
			}
		};
		initialize(new BootLoader(clanConf), config);
	}
}
