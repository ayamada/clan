# @AC_MSG_1@
# @AC_MSG_2@
# @AC_MSG_3@
# @AC_MSG_4@
# @AC_MSG_5@
# @AC_MSG_6@

# (TODO: translate explain from japanese to english)
# (TODO: 日本語のコメントを英語に直してまわる)

EMPTY :=
SPACE := $(EMPTY) $(EMPTY)


JAVA    := @JAVA_PATH@
JAVAC   := @JAVAC_PATH@
#JAR     := @JAR_PATH@
LEIN    := @LEIN_PATH@
#MVN     := @MVN_PATH@
ADB     := @ADB_PATH@
WGET    := @WGET_PATH@
#UNZIP   := @UNZIP_PATH@
#PERL    := @PERL_PATH@
#EXEWRAP := @EXEWRAP_PATH@
L4J     := @L4J_PATH@
L4J_DIR = $(dir $(L4J))
L4J_JAR = $(L4J_DIR)launch4j.jar
HAS_ANDROID_SDK := @HAS_ANDROID_SDK@



PROJECT_GROUPID    := @PROJECT_GROUPID@
PROJECT_ARTIFACTID := @PROJECT_ARTIFACTID@
PROJECT_VERSION    := @PROJECT_VERSION@
PROJECT_NAME       := @PROJECT_NAME@
PROJECT_SHORT_NAME := @PROJECT_SHORT_NAME@

PROJECT_DESKTOP_GROUPID    := @PROJECT_DESKTOP_GROUPID@
PROJECT_ANDROID_GROUPID    := @PROJECT_ANDROID_GROUPID@
PROJECT_ANDROID_VERSIONCODE := @PROJECT_ANDROID_VERSIONCODE@

CLAN_GROUPID    := @CLAN_GROUPID@
CLAN_ARTIFACTID := @CLAN_ARTIFACTID@
CLAN_VERSION    := @CLAN_VERSION@
CLAN_NAME       := @CLAN_NAME@
CLAN_CLOJURE_VERSION := @CLAN_CLOJURE_VERSION@
CLAN_LIBGDX_VERSION  := @CLAN_LIBGDX_VERSION@
CLAN_ANDROID_VERSION := @CLAN_ANDROID_VERSION@
CLAN_NEKO_VERSION    := @CLAN_NEKO_VERSION@






LAYOUT_MAINACTIVITY_ROOT      := android/src-java
LAYOUT_DESKTOP_ROOT           := desktop/src-java
LAYOUT_MAINACTIVITY_DIR       := $(LAYOUT_MAINACTIVITY_ROOT)/$(subst .,/,$(PROJECT_ANDROID_GROUPID))
LAYOUT_DESKTOP_DIR            := $(LAYOUT_DESKTOP_ROOT)/$(subst .,/,$(PROJECT_DESKTOP_GROUPID))







.PHONY: help clean dep jar apk force layout clan assets res release desktop android run

help:
	@echo "sorry, see clan/README.rst"








desktop/assets/pack.png:
	cd clan/tpack && $(LEIN) run -m com.badlogic.gdx.tools.imagepacker.TexturePacker2 ../../textures ../../desktop/assets

ta: ta-clean desktop/assets/pack.png

ta-clean:
	rm -f desktop/assets/pack.{atlas,png}

update-resources-for-release:
	rm -rf desktop/target/resources
	mkdir -p desktop/target/resources
	cp -a desktop/assets desktop/target/resources

# NB: this makes assets/assets/*, it is correct.
add-lib-to-resources:
	rm -rf android/target/resources
	mkdir -p android/target/resources/assets
	cp -a desktop/assets android/target/resources/assets

#	mkdir -p android/target/resources/lib
#	cp -r tmp/libgdx/armeabi-v7a android/target/resources/lib
#	cp -r tmp/libgdx/armeabi android/target/resources/lib




# 現在のところ、depで用意するものはなくなった

dep:

depclean:




.layout-done:
	mkdir -p $(LAYOUT_MAINACTIVITY_DIR)
	cp layout/MainActivity.java $(LAYOUT_MAINACTIVITY_DIR)
	mkdir -p $(LAYOUT_DESKTOP_DIR)
	cp layout/Desktop.java $(LAYOUT_DESKTOP_DIR)
	touch .layout-done

layout: .layout-done

layout-clean:
	rm -rf $(LAYOUT_MAINACTIVITY_ROOT)
	rm -rf $(LAYOUT_DESKTOP_ROOT)
	rm -f .layout-done




repl: .layout-done
	$(MAKE) ta
	export CLAN_TARGET=desktop CLAN_DEBUG=1 && cd desktop && $(LEIN) with-profile +repl repl

desktop/target/$(PROJECT_ARTIFACTID)-devpack.jar: .layout-done
	$(MAKE) ta
	export CLAN_TARGET=desktop CLAN_DEBUG=1 && cd desktop && $(LEIN) with-profile devpack uberjar

devpack: desktop/target/$(PROJECT_ARTIFACTID)-devpack.jar

# NB: 素早い動作確認の為に、再コンパイル無しに実行できるバイナリを生成している
#     (src部をコンパイル対象に含めずにコンパイルし、あとで-cpで読み込む)
# NB: javaのclasspath区切り文字の為にインチキをしている
run: desktop/target/$(PROJECT_ARTIFACTID)-devpack.jar
	export CLAN_TARGET=desktop CLAN_DEBUG=1 && cd desktop && $(JAVA) -cp '../src:target/$(PROJECT_ARTIFACTID)-devpack.jar:;../src;target/$(PROJECT_ARTIFACTID)-devpack.jar' $(PROJECT_DESKTOP_GROUPID).Desktop


desktop-clean:
	cd desktop && $(LEIN) clean


target/$(PROJECT_ARTIFACTID)-debug.jar: .layout-done
	$(MAKE) ta update-resources-for-release
	export CLAN_TARGET=desktop CLAN_DEBUG=1 && cd desktop && $(LEIN) with-profile release uberjar
	mkdir -p target
	cp desktop/target/$(PROJECT_ARTIFACTID).jar target
	cp desktop/target/$(PROJECT_ARTIFACTID).jar target/$(PROJECT_ARTIFACTID)-debug.jar

target/$(PROJECT_ARTIFACTID).jar: .layout-done
	$(MAKE) desktop-clean
	$(MAKE) ta update-resources-for-release
	export CLAN_TARGET=desktop CLAN_RELEASE=1 && cd desktop && $(LEIN) with-profile release uberjar
	mkdir -p target
	cp desktop/target/$(PROJECT_ARTIFACTID).jar target
	$(MAKE) desktop-clean

release-jar: target/$(PROJECT_ARTIFACTID).jar

release-exe: target/$(PROJECT_ARTIFACTID).jar
	-cd target && ln -sf $(L4J_DIR)bin $(L4J_DIR)head $(L4J_DIR)w32api .
	cd target && $(JAVA) -jar $(L4J_JAR) ../l4j/l4j.xml

# TODO: ↑のlaunch4jは失敗しても終了コード0を返す。stdoutの出力を見て判定するように直す
# 成功時
# launch4j: Compiling resources
# launch4j: Linking
# launch4j: Wrapping
# launch4j: Successfully created path/to/hoge.exe
# 失敗時(これ以外にもある)
# launch4j: java.io.FileNotFoundException: hoge (No such file or directory)

release-exe-if-exists:
	if [ x != x$(L4J) ]; then \
		$(MAKE) release-exe; \
	fi
	true

# WARNING: THIS IS EXPERIMENTAL AND DANGEROUS!
debug-exe: target/$(PROJECT_ARTIFACTID)-debug.jar release-exe
	cd target && mv $(PROJECT_ARTIFACTID).exe $(PROJECT_ARTIFACTID)-debug.exe






.droid-build-done: .layout-done
	$(MAKE) ta add-lib-to-resources
	export CLAN_TARGET=android CLAN_DEBUG=1 && cd android && $(LEIN) with-profile devpack droid build
	touch .droid-build-done

.droid-apk-done: .droid-build-done
	export CLAN_TARGET=android CLAN_DEBUG=1 CLAN_BUILD_APK=1 && cd android && $(LEIN) with-profile devpack droid apk
	touch .droid-apk-done

.droid-install-done: .droid-apk-done
	export CLAN_TARGET=android CLAN_DEBUG=1 && cd android && $(LEIN) with-profile devpack droid install
	touch .droid-install-done

# lein droid build
android-build: .droid-build-done

# lein droid apk
android-apk: .droid-apk-done

# lein droid install
android-install: .droid-install-done

# lein droid run
android-run: .droid-install-done
	export CLAN_TARGET=android CLAN_DEBUG=1 && cd android && $(LEIN) with-profile devpack droid run

# lein do droid forward-port, droid repl
android-repl: .droid-install-done
	export CLAN_TARGET=android CLAN_DEBUG=1 && cd android && $(LEIN) with-profile devpack do droid run, droid forward-port, droid repl

android-clean:
	cd android && $(LEIN) clean
	rm -rf android/gen
	rm -f .droid-*-done

release-apk: .layout-done
	$(MAKE) android-clean
	$(MAKE) ta add-lib-to-resources
	export CLAN_TARGET=android CLAN_RELEASE=1 && cd android && $(LEIN) with-profile release droid release build
	export CLAN_TARGET=android CLAN_RELEASE=1 CLAN_BUILD_APK=1 && cd android && $(LEIN) with-profile clan-sign,release droid release apk
	mkdir -p target
	cp android/target/$(PROJECT_ARTIFACTID).apk target
	$(MAKE) android-clean

release-apk-if-exists:
	if [ x != x$(HAS_ANDROID_SDK) ]; then \
		$(MAKE) release-apk; \
	fi
	true

release-apk-install:
	$(ADB) uninstall $(PROJECT_ANDROID_GROUPID)
	$(ADB) install target/$(PROJECT_ARTIFACTID).apk

release-apk-run:
	$(ADB) shell am start -n $(PROJECT_ANDROID_GROUPID)/.MainActivity


release: release-jar release-exe-if-exists release-apk-if-exists


release-clean:
	rm -rf target






clean: desktop-clean android-clean layout-clean ta-clean

ac-clean:
	rm -f config.log config.status
	rm -rf @AC_GENERATED_FILES@

distclean: depclean clean ac-clean release-clean

maintainer-clean: distclean




env:
	env | sort

force: ;



